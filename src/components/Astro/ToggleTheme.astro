---
/* Component for theme switching with dropdown menu.
 *
 * Props:
 * - class?: string - Additional CSS classes
 *
 * Example usage:
 * <ToggleTheme class="ml-auto" />
 *
 * Notes:
 * - Persists theme in localStorage
 * - Supports system theme detection
 * - Keyboard accessible dropdown
 * - Handles view transitions
 * - Theme-based styling
 */

import { Icon } from "astro-icon/components";
import { themeNames } from "@utils/themeNames";

interface Props {
  class?: string | undefined;
}

const { class: className } = Astro.props;
const options = { "rounded-theme": true };
let selectedTheme = themeNames[0];
---

<div class:list={["relative mx-0 inline-block px-0", className]}>
  <div
    class:list={[
      "m-0 min-w-32 border border-theme-secondary bg-theme-secondary text-sm tracking-widest text-theme-secondary shadow shadow-theme-primary",
      options,
    ]}
  >
    <Icon name="ri:paint-fill" size="16" class="absolute left-3" />
    <button
      id="theme-button"
      aria-haspopup="listbox"
      aria-expanded="false"
      class="w-full py-0 pl-8 pr-2 text-left uppercase"
    >
      {selectedTheme.replace("theme-", "")}
    </button>
    <ul
      id="theme-dropdown"
      role="listbox"
      tabindex="-1"
      class:list={[
        "shadow-theme-grey invisible absolute right-0 top-12 z-10 m-0 w-max min-w-full -translate-y-2 border border-theme-primary bg-theme-primary p-1 text-theme-primary opacity-0 shadow-md transition-all duration-150 ease-in-out",
        options,
      ]}
    >
      {
        themeNames.map((name) => (
          <li
            role="option"
            tabindex="0"
            class="theme-option mx-0 cursor-pointer px-2 py-2 pl-4 text-left uppercase first:pt-2 last:pb-2 hover:bg-theme-secondary hover:text-theme-secondary"
            data-theme={name}
          >
            <span class="block overflow-hidden text-ellipsis whitespace-nowrap pl-0 pr-2 text-sm">
              {name.replace("theme-", "").replaceAll("-", " ")}
            </span>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #theme-dropdown.active {
    @apply visible translate-y-0 opacity-100;
  }
</style>

<script is:inline>
  const setTheme = (theme) => {
    const target = document.documentElement;
    target.classList.add(theme);
    document.getElementById("theme-button").textContent = theme.replace("theme-", "").replaceAll("-", " ");
    target.classList.forEach((className) => {
      if (className.startsWith("theme-") && className !== theme) {
        target.classList.remove(className);
      }
    });
    localStorage.setItem("theme", theme);
  };

  const currentTheme = localStorage.getItem("theme");
  if (currentTheme) {
    setTheme(currentTheme);
  } else {
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const prefersLight = window.matchMedia("(prefers-color-scheme: light)").matches;
    setTheme(prefersDark ? "theme-dark" : prefersLight ? "theme-light" : "theme-Alkaline");
  }

  function setupThemeToggle() {
    const themeDropdown = document.querySelector("#theme-dropdown");
    const themeButton = document.getElementById("theme-button");
    const options = themeDropdown.querySelectorAll(".theme-option");

    if (!themeDropdown || !themeButton) return;

    function toggleDropdown() {
      const expanded = themeButton.getAttribute("aria-expanded") === "true";
      themeButton.setAttribute("aria-expanded", !expanded);
      themeDropdown.classList.toggle("active");
    }

    function selectTheme(option) {
      const theme = option.getAttribute("data-theme");
      setTheme(theme);
      toggleDropdown();
      themeButton.focus();
    }

    themeButton.addEventListener("click", toggleDropdown);

    themeButton.addEventListener("keydown", function (e) {
      if (e.key === "ArrowDown" || e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        toggleDropdown();
      }
    });

    options.forEach((option, index) => {
      option.addEventListener("click", () => selectTheme(option));

      option.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          selectTheme(option);
        } else if (e.key === "ArrowDown") {
          e.preventDefault();
          options[(index + 1) % options.length].focus();
        } else if (e.key === "ArrowUp") {
          e.preventDefault();
          options[(index - 1 + options.length) % options.length].focus();
        } else if (e.key === "Escape") {
          toggleDropdown();
          themeButton.focus();
        }
      });
    });

    document.addEventListener("click", (e) => {
      if (
        !themeDropdown.contains(e.target) &&
        !themeButton.contains(e.target) &&
        themeDropdown.classList.contains("active")
      ) {
        toggleDropdown();
      }
    });
  }

  setupThemeToggle();

  document.addEventListener("astro:after-swap", setupThemeToggle);

  document.addEventListener("astro:page-load", () => {
    const currentTheme = localStorage.getItem("theme");
    if (currentTheme) {
      setTheme(currentTheme);
    }
  });
</script>
